{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","current_house","target","innerHTML","setState","HOUSES","name","state","react_default","a","createElement","Fragment","App_NavBar","houses","App_House","Component","NavBar","NavBarStyled","MenuIcon","NavTitle","App_NavLinks","styled","div","_templateObject","_templateObject2","_templateObject3","NavLinks","_this2","console","log","NavLinksStyled","map","house","i","onClick","href","value","key","_templateObject4","House","_this3","HOUSE_LINKS","current_section","App_InfoLinks","sections","InfoLinks","_templateObject5","_this4","j","App_Link","Ikey","Link","button","_templateObject6","primary","css","_templateObject7","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c79405b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport  styled, { css } from 'styled-components'\n\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.HOUSES = [\n      {\n        'name':'Glenroy Street'\n      },\n      {\n        'name':'Mackintosh Place'\n      }\n    ]\n    this.state = {\n      current_house: \"Glenroy Street\"\n    }\n  }\n\n  handleClick = (e) => { \n    var current_house = e.target.innerHTML\n    this.setState({current_house})\n  }\n  render() {\n    return (\n      <React.Fragment>\n      <NavBar houses={this.HOUSES} handleClick={this.handleClick}/>\n      <House name={this.state.current_house} />\n      </React.Fragment>\n    );\n  }\n}\n\n\nclass NavBar extends Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <React.Fragment>\n      <NavBarStyled>\n        <MenuIcon>\n        â˜°\n        </MenuIcon>\n        <NavTitle>\n        Rhys and Tony houses\n        </NavTitle>\n      </NavBarStyled>\n      <NavLinks houses={this.props.houses} handleClick={this.props.handleClick}/>\n      </React.Fragment>\n\n    )\n  }\n}\n\nconst NavBarStyled = styled.div``\nconst MenuIcon = styled.div``\nconst NavTitle = styled.div``\n\n\nclass NavLinks extends Component {\n  constructor(props){\n    super(props)\n\n  }\n\n\n  render() {\n    console.log(this.props)\n    return (\n      <NavLinksStyled>\n      {this.props.houses.map((house,i) => (\n        <a onClick = {this.props.handleClick} href=\"#\" value={house.name} key={i}> {house.name} </a>\n        ))}\n      </NavLinksStyled>\n    )\n  }\n}\n\nconst NavLinksStyled = styled.div``\n\n\n\nclass House extends Component {\n  constructor(props) {\n    super(props)\n    this.HOUSE_LINKS = [\n      {\n        'href':'#',\n        'name':'About',\n      },\n      {\n        'href':'#',\n        'name':'Info',\n      },\n      {\n        'href':'#',\n        'name':'Pictures',\n      },\n    ]\n\n    this.state = {\n      current_section : 'About'\n    }\n  }\n\n  handleClick = (e) => {\n    var current_section = e.target.innerHTML\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <p>{this.props.name}</p>\n      <InfoLinks sections={this.HOUSE_LINKS} handleClick={this.handleClick}/>\n      </React.Fragment>\n    )\n  }\n}\n\nconst HouseStyled = styled.a``\n\nclass InfoLinks extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n\n  render() {\n    return (\n      <React.Fragment>\n        {this.props.sections.map((house, j) => (\n          <Link Ikey={j} name={house.name} handleClick={this.props.handleClick} />\n        ))}\n      </React.Fragment>\n    )\n  }\n}\n\nclass Link extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <a href=\"#\" key={this.props.Ikey} onClick={this.props.handleClick}> {this.props.name} </a>\n    )\n  }\n}\n\n\n\n\n\nconst Button = styled.button`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: palevioletred;\n  margin: 0 1em;\n  padding: 0.25em 1em;\n\n  ${props =>\n    props.primary &&\n    css`\n      background: palevioletred;\n      color: white;\n    `};\n`\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}